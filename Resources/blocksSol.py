# -*- coding: utf-8 -*-
"""Blocks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mgJz1hTGOVWaslPmU7EF9VJrh-1Xq5va
"""

import hashlib

def GGGGotate(lol):
    bit = lol << 1
    movebit = bit & 255
    if lol > 127:
        movebit = movebit | 1
    return movebit

def inverse_GGGGotate(val):
    if val & 1:
        val = val >> 1
        val = val | 128  # Restores the bit shifted out
    else:
        val = val >> 1
    return val

def encrypt_message(value):
    ListMoveBit = []
    ORD_value = [ord(i) for i in value]
    ORD_key = [ord('a')]
    ListMoveBit.append(GGGGotate(ORD_key[0] ^ ORD_value[0]))
    for i, chars in enumerate(ORD_value[1:], 1):
        ListMoveBit.append(GGGGotate(ListMoveBit[i-1] ^ chars))
    Final_encrypted = ""
    for i in ListMoveBit:
        x = hex(i)
        val = x[2:]
        if (i > 9) and (i < 16):
            Final_encrypted += "0" + val
        else:
            Final_encrypted += "0" + val if i < 10 else val
    return Final_encrypted

def decrypt_message(encrypted_message):
    ORD_key = [ord('a')]  # Define ORD_key here
    encrypted_values = [int(encrypted_message[i:i+2], 16) for i in range(0, len(encrypted_message), 2)]
    decrypted_values = []
    for i in range(len(encrypted_values)):
        decrypted_val = inverse_GGGGotate(encrypted_values[i])
        decrypted_val ^= ORD_key[0] if i == 0 else encrypted_values[i - 1]
        decrypted_values.append(decrypted_val)
    return ''.join(chr(val) for val in decrypted_values)

def hash_md5(message):
    # Compute and return the MD5 hash of the given message.
    md5_hash = hashlib.md5()
    md5_hash.update(message.encode())
    return md5_hash.hexdigest()

def main():
    choice = input("Do you want to (E)ncrypt or (D)ecrypt? ").lower()
    if choice == 'e':
        value = input("Enter your value to encrypt: ")
        print("The encrypted message is:", encrypt_message(value))
    elif choice == 'd':
        encrypted_message = input("Enter the encrypted message: ")
        decrypted_message = decrypt_message(encrypted_message)
        print("The decrypted message is:", decrypted_message)
        print("MD5 Hash of the decrypted message:", hash_md5(decrypted_message))


if __name__ == '__main__':
    main()

